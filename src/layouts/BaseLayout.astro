---
import BaseHead from "@components/BaseHead.astro"
import Header from "@components/Header.astro"
import Footer from "@components/Footer.astro"

export interface Props {
	title: string
	description: string
}

const { title, description } = Astro.props
---

<!doctype html>
<html lang="en" style="--alignment: left; --base-font-size: 16px;">
	<head>
		<BaseHead title={title} description={description} />
	</head>

	<body>
		<div id="page-container">
			<div id="container">
				<Header />

				<main>
					<div class="content">
						<slot />
					</div>
					<Footer />
				</main>
			</div>
		</div>

		<style lang="scss">
			#page-container {
				display: grid;

				justify-items: center;

				background-color: var(--color-background-offset);

				transition: background-color 200ms linear;
			}

			#container {
				display: grid;
				grid-template-areas:
					"header"
					"content";
				grid-template-rows: max-content 1fr;

				height: 100dvh;

				margin-top: env(safe-area-inset-top, 0px);
				margin-right: env(safe-area-inset-right, 0px);
				margin-bottom: env(safe-area-inset-bottom, 0px);
				margin-left: env(safe-area-inset-left, 0px);

				background-color: var(--color-background-offset);

				position: relative;

				color: var(--color-foreground);
				min-width: 320px;
				width: 100%;

				transition:
					background-color 200ms linear,
					box-shadow 200ms linear;

				:global(header) {
					grid-area: header;
				}

				main {
					grid-area: content;
				}
			}

			main {
				display: grid;
				grid-auto-rows: 1fr max-content;

				background-color: var(--color-background);
				overflow: auto;

				.content {
					display: grid;
					grid-auto-rows: max-content;
					transition:
						padding 100ms linear,
						background-color 200ms linear;
				}
			}

			main :global(a) {
				position: relative;
				display: inline-block;
				font-weight: 500;
				color: var(--color-highlight-intense);
				text-decoration-color: transparent;

				transition: text-decoration-color 200ms linear;
			}

			main :global(a):hover {
				text-decoration-color: var(--color-highlight-intense);
			}

			main :global(a)::before {
				content: "";
				opacity: 0;
				pointer-events: none;
				position: absolute;
				inset: -3px -6px;
				border-radius: 3px;
				border: 1px solid var(--color-highlight-intense);
				background: var(--color-highlight-focus);
				transition: opacity linear 200ms;
			}

			main :global(a):focus-visible {
				position: relative;
				outline: none;
				box-shadow: none;
			}

			main :global(a):focus-visible::before {
				opacity: 1;
			}

			@media screen and (max-width: 399px) {
				main .content {
					padding: 20px;
					padding-top: 60px;
				}
			}

			@media screen and (min-width: 400px) and (max-width: 649px) {
				main .content {
					padding: 20px;
					padding-top: 60px;
				}
			}

			@media screen and (min-width: 650px) and (max-width: 849px) {
				main .content {
					padding-top: 60px;
					padding-left: 30px;
					padding-right: 30px;
					padding-bottom: 30px;
				}
			}

			@media screen and (min-width: 850px) {
				main .content {
					padding-top: 60px;
					padding-left: 30px;
					padding-right: 30px;
					padding-bottom: 30px;
				}
			}

			@media screen and (min-width: 1100px) {
				main .content {
					padding-top: 60px;
					padding-left: 30px;
					padding-right: 30px;
					padding-bottom: 30px;
				}
			}
		</style>

		<style is:inline is:global>
			html:not(.loaded) * {
				animation-duration: 0ms !important;
				transition-duration: 0ms !important;
			}

			.theme-change * {
				view-transition-name: none !important;
				animation-duration: 0ms !important;
				transition-duration: 0ms !important;
			}

			.theme-change::view-transition-new(root),
			.theme-change::view-transition-old(root) {
				transition-duration: 350ms;
			}
		</style>

		<script>
			requestAnimationFrame(() => {
				requestAnimationFrame(() => {
					document.documentElement.classList.add("loaded")
				})
			})
		</script>
	</body>
</html>
