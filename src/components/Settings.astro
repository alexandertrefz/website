<script>
	import { atom, computed } from "nanostores"
	import { persistentAtom } from "@nanostores/persistent"

	type Theme = "dark" | "light"
	type ThemeOptions = Theme | "automatic"

	export const selectedTheme = persistentAtom<ThemeOptions>(
		"selectedTheme",
		"automatic",
	)

	export const detectedTheme = atom<Theme | undefined>(undefined)

	// Update Detected Theme
	{
		const query = window.matchMedia("(prefers-color-scheme: light)")

		const update = () => {
			if (query.matches) {
				detectedTheme.set("light")
			} else {
				detectedTheme.set("dark")
			}
		}

		update()

		query.addEventListener("change", update)
	}

	export const resolvedTheme = computed(
		[selectedTheme, detectedTheme],
		($selectedTheme, $detectedTheme) => {
			if ($selectedTheme === "automatic") {
				if ($detectedTheme !== undefined) {
					return $detectedTheme
				} else {
					return "light"
				}
			} else {
				return $selectedTheme
			}
		},
	)

	type AlignmentOptions = "left" | "justify" | "right"

	export const alignment = persistentAtom<AlignmentOptions>(
		"alignment",
		"justify",
	)

	alignment.subscribe(($selectedAlignment) => {
		document.documentElement.style.setProperty(
			"--alignment",
			$selectedAlignment,
		)
	})

	export const fontSize = persistentAtom<string>("fontSize", "16px")

	fontSize.subscribe(($selectedFontSize) => {
		document.documentElement.style.setProperty(
			"--base-font-size",
			$selectedFontSize,
		)
	})

	document.documentElement.addEventListener("click", (_event) => {
		settingsOpen.set(false)
	})

	const settingsOpen = atom(false)

	const settingsContainer = document.querySelector("#settingsContainer")!
	const settingsTrigger = settingsContainer.querySelector(
		".trigger",
	) as HTMLButtonElement
	const settingsFlyout = settingsContainer.querySelector(
		".settings",
	) as HTMLButtonElement
	const closeButton = settingsContainer.querySelector(
		".header .close",
	) as HTMLButtonElement
	const settingsContent = settingsContainer.querySelector(".content")!

	settingsOpen.subscribe(($settingsOpen) => {
		if ($settingsOpen) {
			settingsFlyout.removeAttribute("hidden")
			requestAnimationFrame(() => {
				settingsContainer.classList.add("open")
				settingsFlyout.classList.add("open")
			})
		} else {
			settingsContainer.classList.remove("open")
			settingsFlyout.classList.remove("open")
			setTimeout(() => {
				settingsFlyout.setAttribute("hidden", "")
			}, 200)
		}
	})

	settingsContainer.addEventListener("click", (event) => {
		event.stopPropagation()
	})

	settingsContainer.addEventListener("focusout", (event) => {
		let relatedTarget = (event as FocusEvent).relatedTarget

		if (relatedTarget) {
			if (
				!settingsContainer.contains(relatedTarget as Node) ||
				relatedTarget === settingsTrigger
			) {
				settingsOpen.set(false)
			}
		}
	})

	settingsTrigger.addEventListener("click", () => {
		settingsOpen.set(true)
		closeButton.focus()
	})

	closeButton.addEventListener("click", () => {
		settingsOpen.set(false)
		settingsTrigger.focus()
	})

	// Font Size
	{
		const fontSettings = settingsContent.querySelector(".setting.fontSize")!
		const reduceButton = fontSettings.querySelector(
			"button.reduce",
		) as HTMLButtonElement
		const label = fontSettings.querySelector(".label")!
		const increaseButton = fontSettings.querySelector(
			"button.increase",
		) as HTMLButtonElement

		fontSize.subscribe(($fontSize) => {
			const $fontSizeInteger = parseInt($fontSize)

			label.innerHTML = $fontSize

			if ($fontSizeInteger <= 14) {
				reduceButton.disabled = true
			} else {
				reduceButton.disabled = false
			}

			if ($fontSizeInteger >= 20) {
				increaseButton.disabled = true
			} else {
				increaseButton.disabled = false
			}
		})

		reduceButton.addEventListener("click", () => {
			fontSize.set(`${parseInt(fontSize.get()) - 1}px`)
		})

		increaseButton.addEventListener("click", () => {
			fontSize.set(`${parseInt(fontSize.get()) + 1}px`)
		})
	}

	// Alignment
	{
		const alignmentSettings =
			settingsContent.querySelector(".setting.alignment")!
		const leftButton = alignmentSettings.querySelector("button.left")!
		const justifyButton = alignmentSettings.querySelector("button.justify")!
		const rightbutton = alignmentSettings.querySelector("button.right")!

		alignment.subscribe(($alignment) => {
			if ($alignment === "left") {
				leftButton.classList.add("active")
				justifyButton.classList.remove("active")
				rightbutton.classList.remove("active")
			} else if ($alignment === "justify") {
				leftButton.classList.remove("active")
				justifyButton.classList.add("active")
				rightbutton.classList.remove("active")
			} else {
				leftButton.classList.remove("active")
				justifyButton.classList.remove("active")
				rightbutton.classList.add("active")
			}
		})

		leftButton.addEventListener("click", () => {
			alignment.set("left")
		})

		justifyButton.addEventListener("click", () => {
			alignment.set("justify")
		})

		rightbutton.addEventListener("click", () => {
			alignment.set("right")
		})
	}

	// Theme
	{
		const themeSettings = settingsContent.querySelector(".setting.theme")!
		const lightButton = themeSettings.querySelector("button.light")!
		const automaticButton = themeSettings.querySelector("button.automatic")!
		const darkButton = themeSettings.querySelector("button.dark")!

		selectedTheme.subscribe(($theme) => {
			if ($theme === "light") {
				lightButton.classList.add("active")
				automaticButton.classList.remove("active")
				darkButton.classList.remove("active")
			} else if ($theme === "automatic") {
				lightButton.classList.remove("active")
				automaticButton.classList.add("active")
				darkButton.classList.remove("active")
			} else {
				lightButton.classList.remove("active")
				automaticButton.classList.remove("active")
				darkButton.classList.add("active")
			}
		})

		lightButton.addEventListener("click", () => {
			selectedTheme.set("light")
		})

		automaticButton.addEventListener("click", () => {
			selectedTheme.set("automatic")
		})

		darkButton.addEventListener("click", () => {
			selectedTheme.set("dark")
		})
	}

	resolvedTheme.subscribe(($resolvedTheme) => {
		const pageContainer = document.documentElement

		pageContainer.classList.remove("light-theme")
		pageContainer.classList.remove("dark-theme")
		pageContainer.classList.add(`${$resolvedTheme}-theme`)

		document
			.querySelector("meta[name=theme-color]")!
			.setAttribute(
				"content",
				getComputedStyle(pageContainer)
					.getPropertyValue("--color-background-offset-close")
					.trim(),
			)
	})
</script>

<style lang="scss">
	#settingsContainer {
		font-family: var(--font-settings);
		position: relative;

		-webkit-user-select: none;
		user-select: none;

		.settings {
			opacity: 0;
			pointer-events: none;
			-webkit-user-select: none;
			user-select: none;

			&.open {
				opacity: 1;
				pointer-events: unset;
				-webkit-user-select: unset;
				user-select: unset;
			}

			position: absolute;

			top: -13px;
			right: -8px;

			border-radius: 10px;
			background-color: var(--color-background);
			border: 2px solid var(--color-background-offset-furthest);

			transition: opacity linear 200ms, background-color linear 200ms,
				border-color linear 200ms;

			.header {
				display: grid;
				grid-auto-flow: column;
				justify-content: space-between;

				padding: 20px;
				border-bottom: 2px solid var(--color-background-offset-furthest);

				font-weight: 400;
				font-size: 18px;
				height: 60px;

				transition: border-color linear 200ms;

				.close {
					display: grid;
					align-self: center;
					height: 38px;
					width: 38px;
					margin: -12px;
					border-radius: 5px;
					cursor: pointer;

					touch-action: manipulation;

					transition: background-color linear 200ms;
					background-color: var(--color-background-offset);
					border: none;

					&:hover {
						background-color: var(--color-background-offset-further);
					}

					svg {
						align-self: center;
						justify-self: center;
						fill: var(--color-foreground);

						transition: all linear 200ms;
					}

					&:focus-visible {
						outline: none;
						box-shadow: none;
						border: 1px solid var(--color-highlight-intense);
						background: var(--color-highlight-focus);
					}
				}
			}

			.content {
				display: grid;
				gap: 20px;

				padding: 20px;

				font-weight: 500;
				font-size: 16px;

				.setting {
					.headline {
						padding-bottom: 10px;
					}

					button {
						display: grid;
						width: 50px;
						height: 38px;
						background-color: var(--color-background-offset);
						border-radius: 5px;
						border: none;

						transition: background-color linear 200ms;

						touch-action: manipulation;

						&:disabled {
							opacity: 0.8;

							svg {
								opacity: 0.3;
							}
						}

						&:hover {
							background-color: var(--color-background-offset-further);
						}

						&.active {
							background-color: var(--color-highlight-medium);

							svg {
								path {
									fill: hsl(222deg 15% 85%);
								}

								circle {
									stroke: hsl(222deg 15% 85%);
								}
							}
						}

						&:not(.active):hover {
							cursor: pointer;
						}

						&:focus-visible {
							outline: none;
							box-shadow: none;
							border: 1px solid var(--color-highlight-intense);
							background: var(--color-highlight-focus);
						}

						svg {
							align-self: center;
							justify-self: center;
							transition: all linear 200ms;

							circle {
								stroke: var(--color-foreground-emphasis);
								transition: all linear 200ms;
							}

							path {
								fill: var(--color-foreground-emphasis);
								transition: all linear 200ms;
							}
						}
					}

					.label {
						text-align: center;
						width: 50px;
						height: 38px;
						line-height: 38px;
					}

					.controlGroup {
						display: grid;
						grid-auto-flow: column;
						gap: 1px;

						&.buttonsOnly {
							button:first-child {
								border-top-right-radius: 0px;
								border-bottom-right-radius: 0px;
							}

							button:nth-child(2) {
								border-radius: 0px;
							}

							button:last-child {
								border-top-left-radius: 0px;
								border-bottom-left-radius: 0px;
							}
						}
					}
				}
			}
		}
	}
</style>

<div id="settingsContainer">
	<style is:inline is:global>
		.trigger {
			display: grid;
			height: 38px;
			min-width: 38px;

			grid-auto-flow: column;
			gap: 10px;

			cursor: pointer;

			color: var(--color-foreground);
			font-family: var(--font-settings);
			font-size: 18px;
			font-weight: 500;

			border-radius: 5px;
			padding: 10px;

			line-height: 16px;

			transition: background-color linear 200ms, border-color linear 200ms;
			background-color: var(--color-background-offset);
			border: 1px solid transparent;
		}

		.trigger:hover {
			background-color: var(--color-background-offset-further);
		}

		.trigger:focus-visible {
			outline: none;
			box-shadow: none;
			border: 1px solid var(--color-highlight-intense);
			background: var(--color-highlight-focus);
		}

		.trigger svg {
			align-self: center;
			fill: var(--color-foreground);
		}

		@media screen and (min-width: 360px) and (max-width: 599px) {
			.trigger::before {
				content: "Settings";
			}
		}

		@media screen and (min-width: 700px) {
			.trigger::before {
				content: "Settings";
			}
		}

		@media screen and (max-width: 969px) {
			.trigger {
				background-color: var(--color-background-offset-far);
			}
		}

		.settings[data-hidden] {
			display: none;
		}
	</style>
	<button class="trigger" aria-label="Open Settings">
		<svg width="18" height="18" xmlns="http://www.w3.org/2000/svg">
			<path
				d="M2.33.204a3.5 3.5 0 0 1 4.254 4.963l10.709 10.71-1.414 1.414L5.169 6.58A3.502 3.502 0 0 1 .207 2.326l2.237 2.237a1.5 1.5 0 1 0 2.121-2.121L2.329.202l.001.002Zm10.367 1.884L15.879.32l1.414 1.414-1.768 3.182-1.768.354-2.12 2.12-1.415-1.413 2.121-2.121.354-1.768ZM5.979 10.22l1.414 1.414-5.303 5.303A1 1 0 0 1 .598 15.61l.078-.087 5.303-5.303Z"
			></path>
		</svg>
	</button>
	<div class="settings" role="dialog" aria-label="Settings Dialog" hidden>
		<div class="header" id="dialogHeader">
			Settings <button class="close">
				<svg width="14" height="14" xmlns="http://www.w3.org/2000/svg">
					<path
						d="m7 5.586 4.95-4.95 1.414 1.414L8.414 7l4.95 4.95-1.414 1.414L7 8.414l-4.95 4.95L.636 11.95 5.586 7 .636 2.05 2.05.636z"
					></path>
				</svg>
			</button>
		</div>
		<div class="content">
			<div class="setting fontSize">
				<div class="headline">Font Size</div>
				<div class="controlGroup">
					<button class="reduce" aria-label="Reduce font size">
						<svg width="14" height="2" xmlns="http://www.w3.org/2000/svg">
							<path d="M0 0h14v2H0z"></path>
						</svg>
					</button>
					<div class="label"></div>
					<button class="increase" aria-label="Increase font size">
						<svg width="14" height="14" xmlns="http://www.w3.org/2000/svg">
							<path d="M6 6V0h2v6h6v2H8v6H6V8H0V6z"></path>
						</svg>
					</button>
				</div>
			</div>
			<div class="setting alignment">
				<div class="headline">Alignment</div>
				<div class="controlGroup buttonsOnly">
					<button class="left" aria-label="Align text left">
						<svg width="18" height="17" xmlns="http://www.w3.org/2000/svg">
							<path
								d="M0 0h18v2H0V0Zm0 15h14v2H0v-2Zm0-5h18v2H0v-2Zm0-5h14v2H0V5Z"
							></path>
						</svg>
					</button>
					<button class="justify" aria-label="Justify text">
						<svg width="18" height="17" xmlns="http://www.w3.org/2000/svg">
							<path
								d="M0 0h18v2H0V0Zm0 15h18v2H0v-2Zm0-5h18v2H0v-2Zm0-5h18v2H0V5Z"
							></path>
						</svg>
					</button>
					<button class="right" aria-label="Right align text">
						<svg width="18" height="17" xmlns="http://www.w3.org/2000/svg">
							<path
								d="M0 0h18v2H0V0Zm4 15h14v2H4v-2Zm-4-5h18v2H0v-2Zm4-5h14v2H4V5Z"
							></path>
						</svg>
					</button>
				</div>
			</div>
			<div class="setting theme">
				<div class="headline">Theme</div>
				<div class="controlGroup buttonsOnly">
					<button class="light" aria-label="Select light theme">
						<svg width="22" height="22" xmlns="http://www.w3.org/2000/svg">
							<path
								d="M11 17a6 6 0 1 1 0-12 6 6 0 0 1 0 12Zm0-2a4 4 0 1 0 0-8 4 4 0 0 0 0 8ZM10 0h2v3h-2V0Zm0 19h2v3h-2v-3ZM2.515 3.929l1.414-1.414L6.05 4.636 4.636 6.05 2.515 3.93v-.001ZM15.95 17.364l1.414-1.414 2.121 2.121-1.414 1.414-2.121-2.121Zm2.121-14.85 1.414 1.415-2.121 2.121-1.414-1.414 2.121-2.121v-.001ZM4.636 15.95l1.414 1.414-2.121 2.121-1.414-1.414 2.121-2.121ZM22 10v2h-3v-2h3ZM3 10v2H0v-2h3Z"
							></path>
						</svg>
					</button>
					<button class="automatic" aria-label="Select system theme">
						<svg width="20" height="20" xmlns="http://www.w3.org/2000/svg">
							<g transform="translate(1 1)" fill="none">
								<circle
									stroke-width="2"
									stroke-linejoin="round"
									cx="9"
									cy="9"
									r="9"></circle>
								<path d="M9 18a9 9 0 0 1-9-9 9 9 0 0 1 9-9v18Z"></path>
							</g>
						</svg>
					</button>
					<button class="dark" aria-label="Select dark theme">
						<svg width="20" height="20" xmlns="http://www.w3.org/2000/svg">
							<path
								d="M8 5a7 7 0 0 0 12 4.9v.1c0 5.523-4.477 10-10 10S0 15.523 0 10 4.477 0 10 0h.1A6.979 6.979 0 0 0 8 5Zm-6 5a8 8 0 0 0 15.062 3.762A9 9 0 0 1 6.238 2.938 7.999 7.999 0 0 0 2 10Z"
							></path>
						</svg>
					</button>
				</div>
			</div>
		</div>
	</div>
</div>
